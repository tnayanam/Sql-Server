So We need a SQL Server installed in the system. Once that is installed we need a GUI (SSMS) to interact with it. So we need to install that too. So firstly we need to connect to the SQL Server Engine
 via SSMS. 
		Provide Server Type: Database Engine.
        Server Name: It should be the Name or IP Address of that server.
		Authentication: Here we can give an authentication to connect. if we give "windows authentication" then we dont need to do anything because we are already logged into the windows. (Best)
		If we give SQL Server authentication then while installin the Sql Server we must have given one user and password that we need to use.
		               
					
Create Database Manually
CMD: Create Database SampleDB

Location of Database file. Click on the Database to which you want to explore and right click property and then go to Files and there you will find Path Tab.

Change the Name of the Database
CMD: Alter Database Sample2 Modify Name = Sample3

Rename Database using System Defined SProc
CMD: sp_renameDB 'Sample3', 'Sample4'

Drop a Database
CMD: Drop Database Sample4;    

Create a Table from GUI in SSMS:
Once you give all the table column details you can click on top of the tab related to that table column and click on Save.
Before running any query make sure that in top dropdown correct Database is selected.

Create a Table
CMD: 
Create Table tblGender
(
ID  int NOT NULL Primary Key,
Gender nvarchar(50) NOT NULL
)

Create table to a particular Database via Command

CMD: 
Use Sample1
Create Table tblGender
(
ID  int NOT NULL Primary Key,
Gender nvarchar(50) NOT NULL
)

Foreign Key Constraint
CMD: Alter Table tblPerson add Constraint tblPerson_GenderID_FK 
Foreign Key (GenderId) references tblGender(ID);

Default Value in table column
CMD: Alter Table tblPerson Add Constraint DF_tblPerson_genderIdl
DEFAULT 3 FOR GenderId

Insert When not all columns are included
CMD: Insert INTO tblPerson (ID, Name, Email) values (5, 'Jonny', 'j@J.com')

Insert when all columns are included we dnt need to mentioned column name
CMD: Insert INTO tblPerson VALUES (6, 'Arun', 'a@a.com', 2)

Drop a constraint
CMD: ALTER TABLE tblPerson Drop Constraint DF_tblPerson_genderId

Cascading Referential Integrity

1. Drop the corresponding child table when primary table is deleted:

CMD: Alter table tblPerson Add Constraint tblPerson_GenderID_FK  Foreign key (GenderId) References tblGender(ID) on delete cascade;
On Delete cascade if you forgot to add while making the initial Foreign key Relationship then you need to drop the FK constraint and then readd the FK constraint like above. 

2. Set the corresponding Foreign key to NULL value and keep rest of the row value intact
CMD: Alter table tblPerson Add Constraint tblPerson_GenderID_FK  Foreign key (GenderId) References tblGender(ID) on delete set NULL;

3. If we want to set some default value then first give  a default value to the parent table and then use below command
CMD: Alter table tblPerson Add Constraint tblPerson_GenderID_FK  Foreign key (GenderId) References tblGender(ID) on delete set DEFAULT;

Add a Column
CMD: Alter table tblPerson add Age integer


Add Constraint at the Database level for disallowing certain values
CMD: Alter table tblPerson Add Constraint CK_tblPerson_Age CHECK (AGE > 0 AND AGE < 150);

For adding Identity value manually and not by DB Automatically
CMD: Set Identity_Insert TableName ON

If we want DB to automatically insert the Identity Column Value
CMD: Set Identity_Insert TableName OFF

Reseed the value of identity column to 1
CMD: DBCC CheckIdent(tblPersonOne, Reseed,0)

Add an Identity column
CMD: Create table Test2
(
	ID int Identity (1,1),
	Value nvarchar(20)
)

How to get the last identity column
CMD: Select SCOPE_IDENTITY();  => returns same session value
CMD: Select @@Identity ; => returns same session across any scope so, if any trigger is there and it is updating that table it wil give the identity of that table.

CMD: select ident_current('test1');   => Important, across any session



